#!/usr/bin/env bash

CRE=$(tput setaf 1) # red
CYE=$(tput setaf 3) # yellow
CGR=$(tput setaf 2) # green
CBL=$(tput setaf 4) # blue
BLD=$(tput bold)    # bold
CNC=$(tput sgr0)    # reset

date=$(date +%Y%m%d-%H%M%S)

########## ---------- You must not run this as root ---------- ##########

if [ "$(id -u)" = 0 ]; then
    echo "This script MUST NOT be run as root user."
    exit 1
fi

home_dir=$HOME
current_dir=$(pwd)

if [ "$current_dir" != "$home_dir" ]; then
    printf "%s%sThe script must be executed from the HOME directory.%s\n" "${BLD}" "${CYE}" "${CNC}"
    exit 1
fi

########## ---------- Welcome ---------- ##########

echo "Welcome!"
printf '%s%sThis script will check if you have the necessary dependencies, and if not, it will install them. Then, it will clone my repository in your HOME directory.\nAfter that, it will create a backup of your files, and then copy the new files to your computer.\n\nMy dotfiles DO NOT modify any of your system configurations.\nYou will be prompted for your root password to install missing dependencies and/or to switch to zsh shell if its not your default.\n\nThis script doesnt have the potential power to break your system, it only copies files from my repository to your HOME directory.%s\n\n' "${BLD}" "${CRE}" "${CNC}"

while true; do
    read -rp " Do you wish to continue? [y/N]: " yn
    case $yn in
        [Yy]* ) break ;;
        [Nn]* ) exit ;;
        * ) printf " Error: just write 'y' or 'n'\n\n" ;;
    esac
done
clear

########## ---------- Install packages ---------- ##########

echo "Installing needed packages.."

dependencias=(alacritty base-devel brightnessctl bspwm dunst feh firefox git hyfetch imagemagick jq \
			        jgmenu libwebp lsd lxappearance maim mpc mpd neovim ncmpcpp npm pamixer pacman-contrib \
			        papirus-icon-theme physlock picom playerctl polybar polkit-gnome python-gobject ranger \
			        rofi rustup sxhkd tmux ttf-inconsolata ttf-jetbrains-mono ttf-jetbrains-mono-nerd \
			        ttf-joypixels ttf-terminus-nerd thunar ueberzug unzip webp-pixbuf-loader xclip xdg-user-dirs \
			        xdo xdotool xorg-server xorg-xdpyinfo xorg-xinit xorg-xkill xorg-xprop xorg-xrandr xorg-xsetroot \
			        xorg-xwininfo xterm zsh zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting)

is_installed() {
    pacman -Q "$1" &> /dev/null
}

printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
for paquete in "${dependencias[@]}"; do
    if ! is_installed "$paquete"; then
        if sudo pacman -S "$paquete" --noconfirm >/dev/null 2>> RiceError.log; then
            printf "%s%s%s %shas been installed succesfully.%s\n" "${BLD}" "${CYE}" "$paquete" "${CBL}" "${CNC}"
            sleep 1
        else
            printf "%s%s%s %shas not been installed correctly. See %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "$paquete" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
            sleep 1
        fi
    else
        printf '%s%s%s %sis already installed on your system!%s\n' "${BLD}" "${CYE}" "$paquete" "${CGR}" "${CNC}"
        sleep 1
    fi
done
sleep 5
clear

########## ---------- Preparing Folders ---------- ##########

# Verifies if the archive user-dirs.dirs doesn't exist in ~/.config
if [ ! -e "$HOME/.config/user-dirs.dirs" ]; then
    xdg-user-dirs-update
fi

########## ---------- Cloning the Rice! ---------- ##########

echo "Downloading dotfiles"

repo_url="https://github.com/guisaints03/dotfiles"
repo_dir="$HOME/dotfiles"

# Verifies if the folder of the repository exists, and if it does, deletes it
if [ -d "$repo_dir" ]; then
    printf "Removing existing dotfiles repository\n"
    rm -rf "$repo_dir"
fi

# Clone the repository
printf "Cloning dotfiles from %s\n" "$repo_url"
git clone --depth=1 "$repo_url" "$repo_dir"
sleep 2
clear

########## ---------- Copy the Rice! ---------- ##########

echo "Installing dotfiles.."
printf "Copying files to respective directories..\n"

[ ! -d ~/.config ] && mkdir -p ~/.config
[ ! -d ~/.local/bin ] && mkdir -p ~/.local/bin
[ ! -d ~/.local/share ] && mkdir -p ~/.local/share

for dirs in ~/dotfiles/config/*; do
    dir_name=$(basename "$dirs")
    if cp -R "${dirs}" ~/.config/ 2>> RiceError.log; then
        printf "%s%s%s %sconfiguration installed succesfully%s\n" "${BLD}" "${CYE}" "${dir_name}" "${CGR}" "${CNC}"
        sleep 1
    else
        printf "%s%s%s %sconfiguration failed to been installed, see %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "${dir_name}" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
        sleep 1
    fi
done

for folder in applications fonts startup-page; do
    if cp -R ~/dotfiles/misc/$folder ~/.local/share/ 2>> RiceError.log; then
        printf "%s%s%s %sfolder copied succesfully!%s\n" "${BLD}" "${CYE}" "$folder" "${CGR}" "${CNC}"
        sleep 1
    else
        printf "%s%s%s %sfolder failed to been copied, see %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "$folder" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
        sleep 1
    fi
done

if cp -R ~/dotfiles/misc/bin ~/.local/ 2>> RiceError.log; then
    printf "%s%sbin %sfolder copied succesfully!%s\n" "${BLD}" "${CYE}" "${CGR}" "${CNC}"
    sleep 1
else
    printf "%s%sbin %sfolder failed to been copied, see %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
    sleep 1
fi

if cp -R ~/dotfiles/misc/firefox/* ~/.mozilla/firefox/*.default-release/ 2>> RiceError.log; then
    printf "%s%sFirefox theme %scopied succesfully!%s\n" "${BLD}" "${CYE}" "${CGR}" "${CNC}"
    sleep 1
else
    printf "%s%sFirefox theme %sfailed to been copied, see %sRiceError.log %sfor more details.%s\n" "${BLD}" "${CYE}" "${CRE}" "${CBL}" "${CRE}" "${CNC}"
    sleep 1
fi

sed -i "s/user_pref(\"browser.startup.homepage\", \"file:\/\/\/home\/guilherme\/.local\/share\/startup-page\/index.html\")/user_pref(\"browser.startup.homepage\", \"file:\/\/\/home\/$USER\/.local\/share\/startup-page\/index.html\")/" "$HOME"/.mozilla/firefox/*.default-release/user.js
sed -i "s/name: 'Guilherme'/name: '$USER'/" "$HOME"/.local/share/startup-page/config.js
cp -f "$HOME"/dotfiles/home/.zshrc "$HOME"
fc-cache -rv >/dev/null 2>&1

### GTK Themes
sudo unzip "$HOME"/dotfiles/misc/04-Tokyonight-Dark-B-LB.zip -d "$HOME"/.themes

printf "\n\n%s%sFiles copied succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
sleep 5
clear

########## ---------- Installing Paru & others ---------- ##########

logo "installing Paru, Eww, tdrop & xqp"

# Installing Paru
if command -v paru >/dev/null 2>&1; then
    printf "%s%sParu is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "%s%sInstalling paru%s\n" "${BLD}" "${CBL}" "${CNC}"
    {
        cd "$HOME" || exit
        git clone https://aur.archlinux.org/paru-bin.git
        cd paru-bin || exit
        makepkg -si --noconfirm
        } || {
        printf "\n%s%sFailed to install Paru. You may need to install it manually%s\n" "${BLD}" "${CRE}" "${CNC}"
    }
fi

# Intalling tdrop for scratchpads
if command -v tdrop >/dev/null 2>&1; then
    printf "\n%s%sTdrop is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "\n%s%sInstalling tdrop, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
    paru -S tdrop-git --skipreview --noconfirm
fi

# Intalling xqp
if command -v xqp >/dev/null 2>&1; then
    printf "\n%s%sxqp is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "\n%s%sInstalling xqp, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
    paru -S xqp --skipreview --noconfirm
fi

# Installing Eww
if command -v eww >/dev/null 2>&1; then
    printf "\n%s%sEww is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "\n%s%sInstalling Eww, this could take 10 mins or more.%s\n" "${BLD}" "${CBL}" "${CNC}"
    {
        sudo pacman -S rustup --noconfirm
        cd "$HOME" || exit
        git clone https://github.com/elkowar/eww
        cd eww || exit
        cargo build --release --no-default-features --features x11
        sudo install -m 755 "$HOME/eww/target/release/eww" -t /usr/bin/
        cd "$HOME" || exit
        rm -rf {paru-bin,.cargo,.rustup,eww}
        } || {
        printf "\n%s%sFailed to install Eww. You may need to install it manually%s\n" "${BLD}" "${CRE}" "${CNC}"
    }
fi

########## ---------- Enabling MPD service ---------- ##########

echo "Enabling mpd service"

# Check if the mpd service is enabled at the global (system) level
if systemctl is-enabled --quiet mpd.service; then
    printf "\n%s%sDisabling and stopping the global mpd service%s\n" "${BLD}" "${CBL}" "${CNC}"
    sudo systemctl stop mpd.service
    sudo systemctl disable mpd.service
fi

printf "\n%s%sEnabling and starting the user-level mpd service%s\n" "${BLD}" "${CYE}" "${CNC}"
systemctl --user enable --now mpd.service

printf "%s%sDone!!%s\n\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2

sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
git clone https://github.com/spaceship-prompt/spaceship-prompt.git "$ZSH_CUSTOM/themes/spaceship-prompt" --depth=1
ln -s "$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme" "$ZSH_CUSTOM/themes/spaceship.zsh-theme"

########## --------- Changing shell to zsh ---------- ##########

printf "%s%sChanging default shell to zsh%s\n" "${BLD}" "${CYE}" "${CNC}"

if [[ $SHELL != "/usr/bin/zsh" ]]; then
    printf "\n%s%sChanging your shell to zsh. Your root password is needed.%s\n\n" "${BLD}" "${CYE}" "${CNC}"
    # Cambia la shell a zsh
    chsh -s /usr/bin/zsh
    printf "%s%sShell changed to zsh. Please reboot.%s\n\n" "${BLD}" "${CGR}" "${CNC}"
else
    printf "%s%sYour shell is already zsh\nGood bye! installation finished, now reboot%s\n" "${BLD}" "${CGR}" "${CNC}"
fi
rm -rf "$HOME"/dotfiles
zsh